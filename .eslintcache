[{"/workspace/tmp.hug0/src/App.js":"1","/workspace/tmp.hug0/src/index.js":"2","/workspace/tmp.hug0/src/reportWebVitals.js":"3","/workspace/tmp.hug0/src/physics/engine.js":"4","/workspace/tmp.hug0/src/physics/usePhysics.js":"5","/workspace/tmp.hug0/src/physics/index.js":"6","/workspace/tmp.hug0/src/components/logo.js":"7","/workspace/tmp.hug0/src/components/index.js":"8","/workspace/tmp.hug0/src/components/player.js":"9","/workspace/tmp.hug0/src/components/hole.js":"10","/workspace/tmp.hug0/src/components/title.js":"11","/workspace/tmp.hug0/src/physics/components/index.js":"12","/workspace/tmp.hug0/src/physics/components/Bodies.js":"13","/workspace/tmp.hug0/src/physics/useEngine.js":"14"},{"size":3009,"mtime":1611159612104,"results":"15","hashOfConfig":"16"},{"size":500,"mtime":1607112586000,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1607112586000,"results":"18","hashOfConfig":"16"},{"size":3516,"mtime":1611156564874,"results":"19","hashOfConfig":"16"},{"size":405,"mtime":1608401072000,"results":"20","hashOfConfig":"16"},{"size":81,"mtime":1611087672051,"results":"21","hashOfConfig":"16"},{"size":2456,"mtime":1611077709391,"results":"22","hashOfConfig":"16"},{"size":94,"mtime":1611078224011,"results":"23","hashOfConfig":"16"},{"size":3219,"mtime":1611156790744,"results":"24","hashOfConfig":"16"},{"size":2646,"mtime":1611150953131,"results":"25","hashOfConfig":"16"},{"size":1367,"mtime":1611150181861,"results":"26","hashOfConfig":"16"},{"size":24,"mtime":1608405846000,"results":"27","hashOfConfig":"16"},{"size":1433,"mtime":1611150967801,"results":"28","hashOfConfig":"16"},{"size":159,"mtime":1611114439843,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"jy86gw",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/workspace/tmp.hug0/src/App.js",["63"],"/workspace/tmp.hug0/src/index.js",[],["64","65"],"/workspace/tmp.hug0/src/reportWebVitals.js",[],"/workspace/tmp.hug0/src/physics/engine.js",["66"],"import React, { useEffect, useState } from 'react';\nimport Matter from \"matter-js\";\nimport { EngineContext } from \"./useEngine\"\n\nexport const Engine = (props) => {\n\n  const [eg, setEngine] = useState(null);\n\n  const boxRef = props.box//getRef(null)\n  const canvasRef = props.canvas//useRef(null)\n\n  /*   useEffect(() => {\n      console.log(eg)\n    }, [eg]) */\n\n  useEffect(() => {\n    let Engine = Matter.Engine\n    let Render = Matter.Render\n    let World = Matter.World\n    let Bodies = Matter.Bodies\n\n    let engine = Engine.create({})\n    \n    setEngine(engine);\n    engine.world.gravity.y = 0;\n   /*  console.log(engine)\n    console.log('oo') */\n\n    let render = Render.create({\n      element: boxRef.current,\n      engine: engine,\n      canvas: canvasRef.current,\n      options: {\n        width: props.width,\n        height: props.height,\n        showAngleIndicator: true,\n        wireframeBackground: 'transparent',\n        background: 'transparent'\n      },\n    })\n\n    //walls\n    let localWidth = window.innerWidth;\n    let localHeight = window.innerHeight;\n    var wallTop = Bodies.rectangle(localWidth / 2, 0, localWidth, 40, {\n      isStatic: true\n    });\n    var wallBottom = Bodies.rectangle(\n      localWidth / 2,\n      localHeight,\n      localWidth,\n      40,\n      {\n        isStatic: true\n      }\n    );\n    var wallRight = Bodies.rectangle(\n      localWidth,\n      localHeight / 2,\n      40,\n      localHeight,\n      {\n        isStatic: true\n      }\n    );\n    var wallLeft = Bodies.rectangle(0, localHeight / 2, 40, localHeight, {\n      isStatic: true\n    });\n    World.add(engine.world, [wallBottom, wallTop, wallLeft, wallRight]);\n\n    //Matter.Body.translate( wallLeft, {x: 100, y: 0});\n    //Matter.Body.translate( wallRight, {x: 100, y: 0}) \n \n    Engine.run(engine)\n    Render.run(render)\n\n\n    const resizeListener = () => {\n      localWidth = window.innerWidth;\n      localHeight = window.innerHeight;\n      World.remove(engine.world, wallRight );\n\n      wallRight = Bodies.rectangle(\n        localWidth,\n        localHeight / 2,\n        40,\n        localHeight,\n        {\n          isStatic: true\n        }\n      );\n      World.add(engine.world, [wallRight]);\n\n      //wallBottom.setPosition(engine, localWidth / 2, localHeight )\n      //Matter.Body.scale( wallRight, 1.5, 1.2);\n     /*  Matter.Body.translate( wallBottom, {x: localWidth / 2, y: localHeight})\n      Matter.Body.translate( wallRight, {x: 200, y: 0})  */\n      console.log(localWidth + \" \" + localHeight)\n      console.log(wallRight)\n    }\n\n    window.addEventListener('resize', resizeListener);\n    // clean up function\n    return () => {\n      // remove resize listener\n      window.removeEventListener('resize', resizeListener);\n    }\n\n  }, [/* props.options, props.events */])\n\n\n\n  /*   return (\n      <>\n        { eg ?\n          <EngineContext.Provider value={eg}>\n            <div\n              ref={boxRef}\n              style={{\n                width: 300,\n                height: 300,\n                position: 'absolute',\n                opacity: 0.5,\n              }}\n            >\n              <canvas ref={canvasRef} />\n            </div>\n            {props.children}\n          </EngineContext.Provider>\n          : null\n        }\n      </>\n    ) */\n\n  return (\n    <>\n      {\n        eg &&\n        <EngineContext.Provider value={eg}>{props.children}</EngineContext.Provider>\n      }\n    </>\n    /*  eg ? <EngineContext.Provider value={eg}>{props.children}</EngineContext.Provider> : \n     null */\n  )\n\n\n}\n","/workspace/tmp.hug0/src/physics/usePhysics.js",[],"/workspace/tmp.hug0/src/physics/index.js",[],"/workspace/tmp.hug0/src/components/logo.js",[],"/workspace/tmp.hug0/src/components/index.js",[],"/workspace/tmp.hug0/src/components/player.js",["67"],"import React, { useCallback, useEffect, useState } from 'react';\nimport { Graphics, useTick, useApp, Container } from '@inlet/react-pixi';\n\nimport {CircleBody} from '../physics/components';\n\nexport const Player = (props) => {\n    const app = useApp()\n    const height = 40;\n\n    const pDown = () => {\n\n        setclick(true)\n    }\n    const pUp = () => {\n        setclick(false)\n    }\n\n    useEffect(() => {\n\n        //const update = () => setSize(getSize());\n        //window.onresize = update;\n        //return () => (window.onresize = null);\n        window.addEventListener('pointerup', pUp);\n        window.addEventListener('pointerdown', pDown);\n        // clean up function\n        \n        console.log('body render')\n        return () => {\n            // remove resize listener\n\n\n            window.removeEventListener('pointerup', pUp);\n            window.removeEventListener('pointerdown', pDown);\n        }\n\n    }, []);\n\n    const [arrow, update] = useState(0)\n    const [click, setclick] = useState(false)\n    //  useReducer(reducer, initialArgs, init); its a better setState for comprex states\n    const angle = (x, y) => {\n        return Math.atan2(y, x) + Math.PI / 2;\n    }\n\n    useTick(delta => {\n        if (click) {\n            update({\n                arrowSize: 60\n            })\n        }\n        else {\n            //let deltaVector = Matter.Vector.sub(mouse.position, ballBody.position);\n            update({\n                arrowSize: 0,\n                // rotation: angle(deltaVector.x, deltaVector.y)\n            })\n        }\n    })\n\n\n    \n  //BallBody(100, 100, props.radios);\n  const options = {\n    restitution: 1,\n    friction: 0.3,\n    frictionAir: 0.05,\n    label: 'ball',\n    collisionFilter: {\n        category: '0x0002'\n    }\n}\n    return (\n        <Container position={[100, app.screen.height - 100]} >\n            <Arrow {...arrow} height={height}></Arrow>\n            <Ball radios={props.radios} />\n            {/* <BallBody></BallBody> */}\n            <CircleBody x={100} y={ app.screen.height - 100} radios={props.radios} options={options} ></CircleBody>\n        </Container>\n    )\n}\n\n/* const BallBody = (x, y, radios) => {\n\n    const options = {\n        restitution: 1,\n        friction: 0.3,\n        frictionAir: 0.05,\n        label: 'ball',\n        collisionFilter: {\n            category: '0x0002'\n        }\n    }\n    //Bodies(x, y, options)\n    CircleBody(x, y, radios, options)\n}\n\n */\nconst Ball = (props) => {\n    const draw = useCallback((g) => {\n        g.clear()\n        g.beginFill(0xf3f3f3);\n        g.drawCircle(0, 0, props.radios);\n        g.endFill();\n    }, [props]);\n    return <Graphics draw={draw} />;\n}\nconst Arrow = (props) => {\n    /*  useTick(delta => {\n       // do something here\n     }) */\n    const draw = useCallback((g) => {\n        g.clear()\n        g.beginFill(0xF04D4D);\n        g.drawPolygon(\n            [\n                8,\n                props.arrowSize,\n                0,\n                props.arrowSize + 8,\n                -8,\n                props.arrowSize,\n                -8,\n                0,\n                8,\n                0\n            ]\n        );\n        g.endFill();\n    }, [props]);\n    return <Graphics draw={draw} />;\n}","/workspace/tmp.hug0/src/components/hole.js",[],"/workspace/tmp.hug0/src/components/title.js",["68","69"],"import React, {  useEffect, useState } from 'react';\nimport { Text, Container } from '@inlet/react-pixi';\nimport { TextStyle } from 'pixi.js';\n\n\nexport const Title = (props) => {\n\n    const [chars, setChars] = useState([])\n\n    useEffect(() => {\n\n        const ar = [];\n        // console.log(props.textRef.current.childNodes)\n        props.textRef.current.childNodes.forEach(\n            c => {\n                const tmp = c.getBoundingClientRect()\n\n                // console.log(tmp)\n                ar.push({ char: c.innerText, x: tmp.x, y: tmp.y, })\n            }\n        )\n\n       // setChars(ar)\n       // console.log(chars)\n    }, []);\n\n    const style = new TextStyle({\n        /* align: \"center\", */\n        fontFamily: \"Arial\",\n        fontSize: 100,\n        fontWeight: \"bold\",\n        fill: '#ffffff',\n        stroke: \"#000000\",\n        strokeThickness: 2,\n        /*  fill: [\"#26f7a3\", \"#01d27e\"],\n       \n         letterSpacing: 5, */\n        /*  wordWrap: true */\n        /*wordWrapWidth: 10 */\n    });\n\n    return (\n        <Container>\n            {/*  <Text text={props.text} x={0} y={0} style={style} /> */}\n            {\n                chars.map((c, index) =>\n                    <Text key={index} text={c.char} x={c.x} y={c.y} style={style} />\n                    /* console.log(c) */\n                )\n            }\n        </Container>\n    )\n}","/workspace/tmp.hug0/src/physics/components/index.js",[],"/workspace/tmp.hug0/src/physics/components/Bodies.js",["70"],"import { useEffect } from 'react';\nimport Matter from \"matter-js\";\nimport { useEngine } from '../useEngine'\n\n/* const Circle = PixiComponent('Rectangle', {\n    create: props => new Graphics(),\n    applyProps: (instance, _, props) => {\n      const { x, y, width, height, fill } = props;\n      instance.clear();\n      instance.beginFill(fill);\n      instance.drawRect(x, y, width, height);\n      instance.endFill();\n    },\n  });\n */\n\n\n/* Bodies.circle(100 + playerSize.radios, localHeight - 100 - playerSize.radios, playerSize.radios + 5, {\n  restitution: 1,\n  friction: 0.3,\n  frictionAir: 0.05,\n  label: 'ball',\n  collisionFilter: {\n    category: '0x0002'\n  }\n}); */\n\nexport const CircleBody = (props) => {\n  //console.log(root)\n  //ref.current = body;\n  //const ref = useForwardRef(bodyRef);\n\n  const eg = useEngine();\n  /*   const engine = useContext(EngineContext)\n    console.log(engine)\n    console.log('circle') */\n  /*  useCallback((g) => { */\n\n  useEffect(() => {\n    console.log(props)\n    //let b = Matter.Bodies.circle(100, 100, 20);\n    let b = Matter.Bodies.circle(props.x, props.y, props.radios, props.options, props.maxSides)\n    // Matter.World.add(engine.world, [body])\n    Matter.World.add(eg.world, b)\n\n\n  }, []);\n/* \n  useEffect(() => {\n    const body = ref.current!;\n    Matter.Body.setPosition(body, { x: props.x, y: props.y });\n  }, [ref, props.x, props.y]); */\n\n  return (null)\n\n}\n\n//export default CircleBody","/workspace/tmp.hug0/src/physics/useEngine.js",[],{"ruleId":"71","severity":1,"message":"72","line":70,"column":53,"nodeType":"73","messageId":"74","endLine":70,"endColumn":55},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":109,"column":6,"nodeType":"81","endLine":109,"endColumn":41,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":41,"column":11,"nodeType":"85","messageId":"86","endLine":41,"endColumn":16},{"ruleId":"83","severity":1,"message":"87","line":8,"column":19,"nodeType":"85","messageId":"86","endLine":8,"endColumn":27},{"ruleId":"79","severity":1,"message":"88","line":25,"column":8,"nodeType":"81","endLine":25,"endColumn":10,"suggestions":"89"},{"ruleId":"79","severity":1,"message":"90","line":47,"column":6,"nodeType":"81","endLine":47,"endColumn":8,"suggestions":"91"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["92"],"no-negated-in-lhs",["93"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'boxRef', 'canvasRef', 'props.height', and 'props.width'. Either include them or remove the dependency array.","ArrayExpression",["94"],"no-unused-vars","'angle' is assigned a value but never used.","Identifier","unusedVar","'setChars' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.textRef'. Either include it or remove the dependency array.",["95"],"React Hook useEffect has missing dependencies: 'eg.world' and 'props'. Either include them or remove the dependency array.",["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [boxRef, canvasRef, props.height, props.width]",{"range":"103","text":"104"},"Update the dependencies array to be: [props.textRef]",{"range":"105","text":"106"},"Update the dependencies array to be: [eg.world, props]",{"range":"107","text":"108"},[2740,2775],"[boxRef, canvasRef, props.height, props.width]",[639,641],"[props.textRef]",[1228,1230],"[eg.world, props]"]