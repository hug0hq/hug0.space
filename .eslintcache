[{"/workspace/tmp.hug0/src/App.js":"1","/workspace/tmp.hug0/src/index.js":"2","/workspace/tmp.hug0/src/reportWebVitals.js":"3","/workspace/tmp.hug0/src/physics/engine.js":"4","/workspace/tmp.hug0/src/physics/usePhysics.js":"5","/workspace/tmp.hug0/src/physics/index.js":"6"},{"size":8309,"mtime":1611026421504,"results":"7","hashOfConfig":"8"},{"size":500,"mtime":1607112586000,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1607112586000,"results":"10","hashOfConfig":"8"},{"size":1042,"mtime":1608401022000,"results":"11","hashOfConfig":"8"},{"size":405,"mtime":1608401072000,"results":"12","hashOfConfig":"8"},{"size":53,"mtime":1608400780000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"jy86gw",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"/workspace/tmp.hug0/src/App.js",["29","30","31","32","33","34","35","36","37","38","39","40"],"import './App.css';\n\n/* import Stats from 'stats.js'; */\nimport React, { useCallback, useEffect, useState, useRef, useContext } from 'react';\nimport { Stage, Graphics, Text, useTick, useApp, Container, useReducer } from '@inlet/react-pixi';\nimport { TextStyle } from 'pixi.js';\n\nimport {Engine, usePhysics} from \"./physics\"\nimport { Bodies } from 'matter-js';\n\nconst Player = (props) => {\n  const app = useApp()\n  const height = 40;\n\n  const pDown = () => {\n\n    setclick(true)\n  }\n  const pUp = () => {\n    setclick(false)\n  }\n\n  useEffect(() => {\n\n    //const update = () => setSize(getSize());\n    //window.onresize = update;\n    //return () => (window.onresize = null);\n    window.addEventListener('pointerup', pUp);\n    window.addEventListener('pointerdown', pDown);\n    // clean up function\n    return () => {\n      // remove resize listener\n\n\n      window.removeEventListener('pointerup', pUp);\n      window.removeEventListener('pointerdown', pDown);\n    }\n  }, []);\n\n  const [arrow, update] = useState(0)\n  const [click, setclick] = useState(false)\n  //  useReducer(reducer, initialArgs, init); its a better setState for comprex states\n  const angle = (x, y) => {\n    return Math.atan2(y, x) + Math.PI / 2;\n  }\n\n  useTick(delta => {\n    if (click) {\n      update({\n        arrowSize: 60\n      })\n    }\n    else {\n      //let deltaVector = Matter.Vector.sub(mouse.position, ballBody.position);\n      update({\n        arrowSize: 0,\n        //  rotation: angle(deltaVector.x, deltaVector.y)\n      })\n    }\n  })\n\n  return (\n    <Container position={[100, app.screen.height - 100]} >\n      <Arrow {...arrow} height={height}></Arrow>\n      <Ball radios={props.radios} />\n    </Container>\n  )\n}\n\nconst BallBody = () => {\n /*  Bodies.circle(100 + playerSize.radios, localHeight - 100 - playerSize.radios, playerSize.radios + 5, {\n    restitution: 1,\n    friction: 0.3,\n    frictionAir: 0.05,\n    label: 'ball',\n    collisionFilter: {\n      category: '0x0002'\n    }\n  } */\n  const options = {\n    restitution: 1,\n    friction: 0.3,\n    frictionAir: 0.05,\n    label: 'ball',\n    collisionFilter: {\n      category: '0x0002'\n    }\n  }\n  //Bodies(x, y, options)\n}\n\nconst Ball = (props) => {\n  const draw = useCallback((g) => {\n    g.clear()\n    g.beginFill(0xf3f3f3);\n    g.drawCircle(0, 0, props.radios);\n    g.endFill();\n  }, [props]);\n  return <Graphics draw={draw} />;\n}\nconst Arrow = (props) => {\n  /*  useTick(delta => {\n     // do something here\n   }) */\n  const draw = useCallback((g) => {\n    g.clear()\n    g.beginFill(0xF04D4D);\n    g.drawPolygon(\n      [\n        8,\n        props.arrowSize,\n        0,\n        props.arrowSize + 8,\n        -8,\n        props.arrowSize,\n        -8,\n        0,\n        8,\n        0\n      ]\n    );\n    g.endFill();\n  }, [props]);\n  return <Graphics draw={draw} />;\n}\n\nconst Flag = (props) => {\n  /*  useTick(delta => {\n     // do something here\n   }) */\n  const pw = 10 //pole width\n  const ph = 80 //pole height\n\n  let tmpp1 = -pw / 2 - 40\n  let tmpp2 = -ph + 2\n  const tmpsize = 40\n\n  const draw = useCallback((g) => {\n    g.clear()\n      .beginFill(0xF04D4D)\n      .moveTo(-pw / 2, tmpp2)\n      .lineTo(tmpp1, tmpp2 + tmpsize / 2 - 5)\n      .quadraticCurveTo(tmpp1 - 10, tmpp2 + tmpsize / 2, tmpp1, tmpp2 + tmpsize / 2 + 5)\n      .lineTo(-pw / 2, tmpp2 + tmpsize)\n      .endFill()\n    /*  g.clear();\n     g.beginFill(props.color);\n     g.drawRect(props.x, props.y, props.width, props.height);\n     g.endFill(); */\n\n  }/* , [props] */);\n  return <Graphics draw={draw} />;\n}\n\nconst FlagStick = (props) => {\n  /*  useTick(delta => {\n     // do something here\n   })\n  */\n  const pw = 10 //pole width\n  const ph = 80 //pole height\n  let sp = - pw / 2 //mid\n\n  const draw = useCallback((g) => {\n    g.clear()\n      .beginFill(0xf3f3f3)\n      .moveTo(sp, 15)\n      .arc(sp + pw / 2, -ph, pw / 2, Math.PI, 0)\n      .lineTo(sp + pw, 15)\n      .endFill()\n    /*  g.clear();\n     g.beginFill(props.color);\n     g.drawRect(props.x, props.y, props.width, props.height);\n     g.endFill(); */\n\n  }/* , [props] */);\n  return <Graphics draw={draw} />;\n}\n\n//const reducer = (_, { data }) => data\n\nconst Hole = (props) => {\n  const app = useApp()\n  //const [size, setSize] = useState(window.innerWidth/window.innerHeight);\n  const [motion, update] = useState()\n  //  useReducer(reducer, initialArgs, init); its a better setState for comprex states\n  useTick(delta => {\n\n    update({\n      position: [app.screen.width - 100, app.screen.height - 100]\n    })\n  })\n  /* useTick(delta => {\n    //const i = (iter.current += 0.05 * delta)\n    update({\n      type: 'update',\n      data: {\n        position: [app.screen.width - 100, app.screen.height - 100]\n      }\n    })\n  }) */\n\n  return (\n    <Container {...motion} /* scale={size}  position={[app.screen.width - 100, app.screen.height - 100]} */ >\n      <Hole_p />\n      <Flag />\n      <FlagStick />\n    </Container>\n  );\n}\nconst Hole_p = (props) => {\n  const draw = useCallback((g) => {\n    g.clear();\n    g.beginFill(0x424242);\n    g.drawCircle(0, 0, 15);\n    g.endFill();\n  }/* , [props] */);\n\n  return (\n    <Graphics draw={draw} />\n  );\n}\n\nconst App = () => {\n  //const [stats, setStats] = useState(null);\n  useEffect(() => {\n    //setWind(document.getElementById('root'));\n    console.log('ðŸ˜‹')\n    console.log(devicePixelRatio)\n\n    const resizeListener = () => {\n      console.log('resize')\n\n      if (!app.current.renderer) {\n        return\n      }\n\n\n      console.log(h1text)\n\n      //app.renderer.resize(window.innerWidth, window.innerHeight)\n      // Immediately render because resizing clears the canvas\n      //app.render()\n    };\n    // set resize listener\n    window.addEventListener('resize', resizeListener);\n    // clean up function\n    return () => {\n      // remove resize listener\n      window.removeEventListener('resize', resizeListener);\n    }\n  }, [])\n\n  const options = {\n    backgroundColor: 0x000000,\n    antialias: true,\n    autoDensity: true,\n    resolution: devicePixelRatio,\n    transparent: true,\n    /*  preserveDrawingBuffer: true, */ //fixes flikering \n    resizeTo: window ///document.getElementById('root'), // or window, or global.window, etc\n  };\n\n  /*  const resize = () => {\n     app.renderer.resize(window.innerWidth, window.innerHeight)\n     // Immediately render because resizing clears the canvas\n     app.render()\n   } */\n\n  const app = useRef()\n  const h1text = useRef()\n\n  const [text] = useState('Hello from html')\n\n  return (\n    <>\n      <div className='tx'>\n        <h1 ref={h1text}>\n          {\n            text.split('').map((char, index) => <span key={index}>{char}</span>)\n          }\n        </h1>\n      </div>\n      <Engine/>\n      <div className=\"main\">\n        <Stage onMount={_app => (app.current = _app)}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          /*  raf={false}\n           renderOnComponentChange={true} */\n          options={options} >\n          <MyComponent text={text} textRef={h1text} />\n          <Player color={0xeef1f5} radios={10} />\n          <Hole />\n        </Stage>\n      </div>\n    </>)\n};\n\n/* const charsReducer = (state, action) => {\n  switch (action.type) {\n    case 'add':\n      return {count: state.count + 1};   \n    default:\n      throw new Error();\n  }\n} */\n\nconst MyComponent = (props) => {\n\n  const [chars, setChars] = useState([])\n\n  useEffect(() => {\n\n    const ar = [];\n    // console.log(props.textRef.current.childNodes)\n    props.textRef.current.childNodes.forEach(\n      c => {\n        const tmp = c.getBoundingClientRect()\n\n        // console.log(tmp)\n        ar.push({ char: c.innerText, x: tmp.x, y: tmp.y, })\n      }\n    )\n\n    setChars(ar)\n    console.log(chars)\n  }, []);\n\n  const style = new TextStyle({\n    /* align: \"center\", */\n    fontFamily: \"Arial\",\n    fontSize: 100,\n    fontWeight: \"bold\",\n    fill: '#ffffff',\n    stroke: \"#000000\",\n    strokeThickness: 2,\n    /*  fill: [\"#26f7a3\", \"#01d27e\"],\n   \n     letterSpacing: 5, */\n    /*  wordWrap: true */\n    /*wordWrapWidth: 10 */\n  });\n\n  return (\n    <Container>\n      {/*  <Text text={props.text} x={0} y={0} style={style} /> */}\n      {\n        chars.map((c, index) =>\n          <Text key={index} text={c.char} x={c.x} y={c.y} style={style} />\n          /* console.log(c) */\n        )\n      }\n    </Container>\n  )\n}\n\nexport default App;\n",["41","42"],"/workspace/tmp.hug0/src/index.js",[],"/workspace/tmp.hug0/src/reportWebVitals.js",[],"/workspace/tmp.hug0/src/physics/engine.js",["43","44","45","46","47"],"import React, { useCallback, useEffect, useState, useRef, useContext } from 'react';\nimport Matter from \"matter-js\";\n\nexport const Engine = () => {\n    const boxRef = useRef(null)\n    const canvasRef = useRef(null)\n    useEffect(() => {\n      let Engine = Matter.Engine\n      let Render = Matter.Render\n      let World = Matter.World\n      let Bodies = Matter.Bodies\n      let engine = Engine.create({})\n      let render = Render.create({\n        element: boxRef.current,\n        engine: engine,\n        canvas: canvasRef.current,\n        options: {\n          width: 300,\n          height: 300,\n          showAngleIndicator: true,\n          wireframeBackground: 'transparent',\n          background: 'transparent'\n        },\n      })\n  \n      Engine.run(engine)\n      Render.run(render)\n    }, [])\n  \n    return (\n      <div\n        ref={boxRef}\n        style={{\n          width: 300,\n          height: 300,\n          position: 'absolute',\n          opacity: 0.5,\n        }}\n      >\n        <canvas ref={canvasRef} />\n      </div>\n    )\n  }\n  ","/workspace/tmp.hug0/src/physics/usePhysics.js",[],"/workspace/tmp.hug0/src/physics/index.js",[],{"ruleId":"48","severity":1,"message":"49","line":4,"column":59,"nodeType":"50","messageId":"51","endLine":4,"endColumn":69},{"ruleId":"48","severity":1,"message":"52","line":5,"column":61,"nodeType":"50","messageId":"51","endLine":5,"endColumn":71},{"ruleId":"48","severity":1,"message":"53","line":8,"column":17,"nodeType":"50","messageId":"51","endLine":8,"endColumn":27},{"ruleId":"48","severity":1,"message":"54","line":9,"column":10,"nodeType":"50","messageId":"51","endLine":9,"endColumn":16},{"ruleId":"48","severity":1,"message":"55","line":43,"column":9,"nodeType":"50","messageId":"51","endLine":43,"endColumn":14},{"ruleId":"48","severity":1,"message":"56","line":70,"column":7,"nodeType":"50","messageId":"51","endLine":70,"endColumn":15},{"ruleId":"48","severity":1,"message":"57","line":80,"column":9,"nodeType":"50","messageId":"51","endLine":80,"endColumn":16},{"ruleId":"58","severity":1,"message":"59","line":138,"column":16,"nodeType":"50","endLine":138,"endColumn":27},{"ruleId":"58","severity":1,"message":"59","line":164,"column":16,"nodeType":"50","endLine":164,"endColumn":27},{"ruleId":"60","severity":1,"message":"61","line":205,"column":7,"nodeType":"62","endLine":205,"endColumn":17},{"ruleId":"58","severity":1,"message":"59","line":212,"column":16,"nodeType":"50","endLine":212,"endColumn":27},{"ruleId":"58","severity":1,"message":"63","line":328,"column":6,"nodeType":"64","endLine":328,"endColumn":8,"suggestions":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"48","severity":1,"message":"70","line":1,"column":17,"nodeType":"50","messageId":"51","endLine":1,"endColumn":28},{"ruleId":"48","severity":1,"message":"71","line":1,"column":41,"nodeType":"50","messageId":"51","endLine":1,"endColumn":49},{"ruleId":"48","severity":1,"message":"49","line":1,"column":59,"nodeType":"50","messageId":"51","endLine":1,"endColumn":69},{"ruleId":"48","severity":1,"message":"72","line":10,"column":11,"nodeType":"50","messageId":"51","endLine":10,"endColumn":16},{"ruleId":"48","severity":1,"message":"73","line":11,"column":11,"nodeType":"50","messageId":"51","endLine":11,"endColumn":17},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useReducer' is defined but never used.","'usePhysics' is defined but never used.","'Bodies' is defined but never used.","'angle' is assigned a value but never used.","'BallBody' is assigned a value but never used.","'options' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","react/jsx-pascal-case","Imported JSX component Hole_p must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","React Hook useEffect has missing dependencies: 'chars' and 'props.textRef'. Either include them or remove the dependency array.","ArrayExpression",["74"],"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"'useCallback' is defined but never used.","'useState' is defined but never used.","'World' is assigned a value but never used.","'Bodies' is assigned a value but never used.",{"desc":"77","fix":"78"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [chars, props.textRef]",{"range":"79","text":"80"},[7675,7677],"[chars, props.textRef]"]