[{"/workspace/tmp.hug0/src/App.js":"1","/workspace/tmp.hug0/src/index.js":"2","/workspace/tmp.hug0/src/reportWebVitals.js":"3","/workspace/tmp.hug0/src/physics/engine.js":"4","/workspace/tmp.hug0/src/physics/usePhysics.js":"5","/workspace/tmp.hug0/src/physics/index.js":"6","/workspace/tmp.hug0/src/components/logo.js":"7","/workspace/tmp.hug0/src/components/index.js":"8","/workspace/tmp.hug0/src/components/player.js":"9","/workspace/tmp.hug0/src/components/hole.js":"10","/workspace/tmp.hug0/src/components/title.js":"11","/workspace/tmp.hug0/src/physics/components/index.js":"12","/workspace/tmp.hug0/src/physics/components/Bodies.js":"13","/workspace/tmp.hug0/src/physics/useEngine.js":"14","/workspace/tmp.hug0/src/p5/p5-1.js":"15","/workspace/tmp.hug0/src/p5/p5-2.js":"16","/workspace/tmp.hug0/src/p5/p5-3.js":"17","/workspace/tmp.hug0/src/p5/p5-4.js":"18","/workspace/tmp.hug0/src/p5/p5-5.js":"19","/workspace/tmp.hug0/src/p5/p5-6.js":"20","/workspace/tmp.hug0/src/p5/p5-7.js":"21","/workspace/tmp.hug0/src/p5/p5-8.js":"22","/workspace/tmp.hug0/src/p5/p5-9.js":"23","/workspace/tmp.hug0/src/p5/p5-10.js":"24","/workspace/tmp.hug0/src/components/card.js":"25","/workspace/tmp.hug0/src/components/ga-card.js":"26","/workspace/tmp.hug0/src/components/social.js":"27","/workspace/tmp.hug0/src/components/pens.js":"28","/workspace/tmp.hug0/src/components/pen.js":"29","/workspace/tmp.hug0/src/components/link.js":"30","/workspace/tmp.hug0/src/components/draw.js":"31","/workspace/tmp.hug0/src/components/ga-group.js":"32"},{"size":5990,"mtime":1611521624380,"results":"33","hashOfConfig":"34"},{"size":500,"mtime":1607112586000,"results":"35","hashOfConfig":"34"},{"size":362,"mtime":1607112586000,"results":"36","hashOfConfig":"34"},{"size":12081,"mtime":1611517698320,"results":"37","hashOfConfig":"34"},{"size":405,"mtime":1608401072000,"results":"38","hashOfConfig":"34"},{"size":81,"mtime":1611340289051,"results":"39","hashOfConfig":"34"},{"size":2456,"mtime":1611077709391,"results":"40","hashOfConfig":"34"},{"size":286,"mtime":1611521576230,"results":"41","hashOfConfig":"34"},{"size":6069,"mtime":1611509479570,"results":"42","hashOfConfig":"34"},{"size":2976,"mtime":1611282659420,"results":"43","hashOfConfig":"34"},{"size":1378,"mtime":1611283080670,"results":"44","hashOfConfig":"34"},{"size":24,"mtime":1608405846000,"results":"45","hashOfConfig":"34"},{"size":1451,"mtime":1611282997830,"results":"46","hashOfConfig":"34"},{"size":159,"mtime":1611114439843,"results":"47","hashOfConfig":"34"},{"size":1497,"mtime":1611528105050,"results":"48","hashOfConfig":"34"},{"size":2184,"mtime":1611341669851,"results":"49","hashOfConfig":"34"},{"size":954,"mtime":1611341546921,"results":"50","hashOfConfig":"34"},{"size":983,"mtime":1611341632941,"results":"51","hashOfConfig":"34"},{"size":1228,"mtime":1611342684741,"results":"52","hashOfConfig":"34"},{"size":1400,"mtime":1611342819761,"results":"53","hashOfConfig":"34"},{"size":1044,"mtime":1611383341061,"results":"54","hashOfConfig":"34"},{"size":1193,"mtime":1611342499361,"results":"55","hashOfConfig":"34"},{"size":1685,"mtime":1611342531791,"results":"56","hashOfConfig":"34"},{"size":782,"mtime":1611342282731,"results":"57","hashOfConfig":"34"},{"size":1175,"mtime":1611504797300,"results":"58","hashOfConfig":"34"},{"size":628,"mtime":1611506041330,"results":"59","hashOfConfig":"34"},{"size":2010,"mtime":1611506067380,"results":"60","hashOfConfig":"34"},{"size":3973,"mtime":1611433567503,"results":"61","hashOfConfig":"34"},{"size":1343,"mtime":1611506035020,"results":"62","hashOfConfig":"34"},{"size":900,"mtime":1611457450334,"results":"63","hashOfConfig":"34"},{"size":3806,"mtime":1611505470490,"results":"64","hashOfConfig":"34"},{"size":2979,"mtime":1611527723710,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"jy86gw",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"92"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/workspace/tmp.hug0/src/App.js",[],["134","135"],"/workspace/tmp.hug0/src/index.js",[],"/workspace/tmp.hug0/src/reportWebVitals.js",[],"/workspace/tmp.hug0/src/physics/engine.js",["136"],"import React, { useEffect, useState } from 'react';\nimport Matter from \"matter-js\";\n//import { EngineContext } from \"./useEngine\"\n\nimport { Player, Hole, H } from '../components'\n\nimport { useApp } from '@inlet/react-pixi';\n\n\n//const golf = document.getElementById('golf')\n\nexport const Engine = (props) => {\n\n  const app = useApp()\n\n\n  /* const golf = document.eve\n */\n  //const [eg, setEngine] = useState(null);\n  const [playerB, setPlayerB] = useState(null);\n  /* \n    const [ww, setW] = useState(null);\n    const [hh, setH] = useState(null); */\n\n  const [constraints, setContraints] = useState()\n  const [scene, setScene] = useState()\n\n  // const [mouse] = useState(  .create(document.querySelector(\"body\")) );\n\n  const boxRef = props.box//getRef(null)\n  const canvasRef = props.canvas//useRef(null)\n\n  const headerRef = props.header\n\n  /*   let Engine = Matter.Engine\n    let Render = Matter.Render\n    let World = Matter.World\n    let Bodies = Matter.Bodies */\n\n\n  /*   useEffect(() => {\n      console.log(eg)\n    }, [eg]) */\n\n  useEffect(() => {\n    /*\n        let engine = Engine.create({})\n        engine.world.gravity.y = 0;\n        setEngine(engine);\n    \n    \n        Engine.run(engine)\n        /*  console.log(engine)\n         console.log('oo') *./\n    \n        let render = Render.create({\n          element: boxRef.current,\n          engine: engine,\n          canvas: canvasRef.current,\n          options: {\n            width: props.width,\n            height: props.height,\n            showAngleIndicator: true,\n            wireframeBackground: 'transparent',\n            background: 'transparent'\n          },\n        })\n    \n        //walls\n        let localWidth = window.innerWidth;\n        let localHeight = window.innerHeight;\n        var wallTop = Bodies.rectangle(localWidth / 2, 0, localWidth, 40, {\n          isStatic: true\n        });\n        var wallBottom = Bodies.rectangle(\n          localWidth / 2,\n          localHeight,\n          localWidth,\n          40,\n          {\n            isStatic: true\n          }\n        );\n        var wallRight = Bodies.rectangle(\n          localWidth,\n          localHeight / 2,\n          40,\n          localHeight,\n          {\n            isStatic: true\n          }\n        );\n        var wallLeft = Bodies.rectangle(0, localHeight / 2, 40, localHeight, {\n          isStatic: true\n        });\n    \n        World.add(engine.world, [wallBottom, wallTop, wallLeft, wallRight]);\n    \n        //Matter.Body.translate( wallLeft, {x: 100, y: 0});\n        //Matter.Body.translate( wallRight, {x: 100, y: 0}) \n    \n    \n        const handleCollision = (event) => {\n          var { pairs } = event;\n          pairs.forEach((pair) => {\n            var { bodyA, bodyB } = pair;\n            if (bodyA.label === \"ball\" && bodyB.label === \"hole\") {\n              Matter.Body.setVelocity(bodyA, {\n                x: 0,\n                y: 0\n              });\n              Matter.Body.setPosition(bodyA, {\n                x: 170,\n                y: 450\n              });\n              console.log(\"Hole!\");\n            }\n          });\n        }\n    \n        Matter.Events.on(engine, 'collisionStart', handleCollision);\n    \n    \n        Render.run(render)\n    \n    \n        const resizeListener = () => {\n          localWidth = window.innerWidth;\n          localHeight = window.innerHeight;\n          World.remove(engine.world, wallRight);\n    \n          wallRight = Bodies.rectangle(\n            localWidth,\n            localHeight / 2,\n            40,\n            localHeight,\n            {\n              isStatic: true\n            }\n          );\n          World.add(engine.world, [wallRight]);\n    \n          //wallBottom.setPosition(engine, localWidth / 2, localHeight )\n          //Matter.Body.scale( wallRight, 1.5, 1.2);\n          /*  Matter.Body.translate( wallBottom, {x: localWidth / 2, y: localHeight})\n           Matter.Body.translate( wallRight, {x: 200, y: 0})  */\n    /*  console.log(localWidth + \" \" + localHeight)\n     console.log(wallRight) */\n\n    //}\n\n    // window.addEventListener('resize', resizeListener);\n    // clean up function\n    return () => {\n      // remove resize listener\n      // window.removeEventListener('resize', resizeListener);\n\n      //Matter.Events.off(engine, 'collisionStart')\n    }\n\n  }, [/* props.options, props.events */ boxRef, canvasRef, props.height, props.width])\n\n  // useEffect(() => {\n  /*\n      const ballBody = Bodies.circle(100 + 10, hh - 100 - 10, 10 + 2 /* + 5 *./, {\n        restitution: 1,\n        friction: 0.3,\n        frictionAir: 0.05,\n        label: 'ball',\n        collisionFilter: {\n          category: '0x0002'\n        }\n      });\n  \n      const holeBody = Bodies.circle(ww - 100, hh - 100, 10, {\n        collisionFilter: {\n          category: '0x0002'\n        },\n        label: 'hole',\n        isSensor: true,\n        isStatic: true\n      });\n      if (eg)\n        World.add(eg.world, [ballBody, holeBody]);\n      //setPlayerB(ballBody)\n  \n      */\n\n  // }, [ww, hh])\n\n  /*  const createPhysicsDebugRender = () => {\n \n   }\n   const resize = () => {\n \n     if (eg) { */\n  /* \n        Render.stop(render);\n   */\n  // World.clear(eg.world);\n  // Engine.clear(eg);\n\n\n  /* if (render) {\n    render.canvas.remove();\n    createPhysicsDebugRender();\n  } */\n\n  /*   }\n\n    setW(app.screen.width)\n    setH(app.screen.height)\n\n    //console.log(app.screen.width)\n  } */\n\n\n\n\n  const STATIC_DENSITY = 100;\n\n  /*  const playerReset = () => {\n \n   } */\n\n  const handleCollision = (event) => {\n    let { pairs } = event;\n    let height = app.screen.height;\n\n    pairs.forEach((pair) => {\n      let { bodyA, bodyB } = pair;\n      if (bodyA.label === \"ball\" && bodyB.label === \"hole\") {\n        Matter.Body.setVelocity(bodyA, {\n          x: 0,\n          y: 0\n        });\n        Matter.Body.setPosition(bodyA, {\n          x: 100 - 12 / 2,\n          y: height - 100 + 12 / 2,\n        });\n        console.log(\"Hole! ⛳\");\n      }\n    });\n  }\n\n  useEffect(() => {\n\n    let Engine = Matter.Engine\n    let Render = Matter.Render\n    let World = Matter.World\n    let Bodies = Matter.Bodies\n\n    let engine = Engine.create({})\n    engine.world.gravity.y = 0;\n\n    let render = Render.create({\n      element: boxRef.current,\n      engine: engine,\n      canvas: canvasRef.current,\n      options: {\n        /*  width: props.width,\n         height: props.height, */\n        showAngleIndicator: true,\n        wireframeBackground: 'transparent',\n        background: 'transparent'\n      },\n    })\n\n    const wallB = Bodies.rectangle(0, 0, 0, STATIC_DENSITY,\n      {\n        isStatic: true\n      }\n    );\n    const wallT = Bodies.rectangle(0, 0, 0, STATIC_DENSITY,\n      {\n        isStatic: true\n      }\n    );\n    const wallL = Bodies.rectangle(0, 0, STATIC_DENSITY, 0,\n      {\n        isStatic: true\n      }\n    );\n    const wallR = Bodies.rectangle(0, 0, STATIC_DENSITY, 0,\n      {\n        isStatic: true\n      }\n    );\n    //World.add(engine.world, [wallRight]);\n\n    /*    const ball = Bodies.circle(150, 0, 10, {\n         restitution: 0.9,\n         render: {\n           fillStyle: 'yellow',\n         },\n       }) */\n\n    const ballBody = Bodies.circle(0, 0, 10 + 2 /* + 5 */, {\n      restitution: 1,\n      friction: 0.3,\n      frictionAir: 0.05,\n      label: 'ball',\n      collisionFilter: {\n        category: '0x0002'\n      }\n    });\n\n    setPlayerB(ballBody)\n\n    const holeBody = Bodies.circle(0, 0, 10, {\n      collisionFilter: {\n        category: '0x0002'\n      },\n      label: 'hole',\n      isSensor: true,\n      isStatic: true\n    });\n\n\n\n    World.add(engine.world, [wallB, wallT, wallL, wallR, ballBody, holeBody])\n    Engine.run(engine)\n    Render.run(render)\n\n    Matter.Events.on(engine, 'collisionStart', handleCollision);\n\n\n    //handleResize()\n    setScene(render)\n\n    const handleResize = () => {\n      app.resize()\n      let tmp = {\n        width: app.screen.width,\n        height: app.screen.height\n      }\n      // console.log(app)\n      //console.log(boxRef.current.getBoundingClientRect())\n      setContraints(tmp)\n\n      //console.log('r')\n    }\n    handleResize()\n\n    window.addEventListener('resize', handleResize);\n    // clean up function\n\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n\n    }\n    /*   return () => {\n        // remove resize listener\n        window.removeEventListener('resize', resize);\n  \n        //Matter.Events.off(engine, 'collisionStart')\n      } */\n    // eslint-disable-next-line\n  }, [boxRef, canvasRef]);\n\n\n  /*   useEffect(() => {\n      //console.log(app.screen)\n    \n      // eslint-disable-next-line\n    }, [])\n   */\n\n\n  useEffect(() => {\n    // console.log('update')\n    if (constraints) {\n      //console.log(constraints)\n      let { width, height } = constraints\n\n      // Dynamically update canvas and bounds\n      scene.bounds.max.x = width\n      scene.bounds.max.y = height\n      scene.options.width = width\n      scene.options.height = height\n      scene.canvas.width = width\n      scene.canvas.height = height\n\n      //console.log('update')\n      // Dynamically update floor\n      const wallB = scene.engine.world.bodies[0]\n      Matter.Body.setPosition(wallB, {\n        x: width / 2,\n        y: height + STATIC_DENSITY / 2 - 10,\n      })\n      Matter.Body.setVertices(wallB, [\n        { x: 0, y: height },\n        { x: width, y: height },\n        { x: width, y: height + STATIC_DENSITY },\n        { x: 0, y: height + STATIC_DENSITY },\n      ])\n\n      const wallT = scene.engine.world.bodies[1]\n      Matter.Body.setPosition(wallT, {\n        x: width / 2,\n        y: 10 - STATIC_DENSITY / 2 /*+ STATIC_DENSITY / 2 */,\n      })\n      Matter.Body.setVertices(wallT, [\n        { x: 0, y: 0 },\n        { x: width, y: 0 },\n        { x: width, y: 0 + STATIC_DENSITY },\n        { x: 0, y: 0 + STATIC_DENSITY },\n      ])\n\n      const wallL = scene.engine.world.bodies[2]\n      Matter.Body.setPosition(wallL, {\n        x: - STATIC_DENSITY / 2 + 20, //- STATIC_DENSITY / 2,\n        y: height / 2,\n      })\n      Matter.Body.setVertices(wallL, [\n        { x: 0 - STATIC_DENSITY / 2, y: 0 },\n        { x: 0 - STATIC_DENSITY / 2, y: height },\n        { x: 0 + STATIC_DENSITY / 2, y: height },\n        { x: 0 + STATIC_DENSITY / 2, y: 0 }\n      ])\n\n      const wallR = scene.engine.world.bodies[3]\n      Matter.Body.setPosition(wallR, {\n        x: width + STATIC_DENSITY / 2 - 20,\n        y: height / 2,\n      })\n      Matter.Body.setVertices(wallR, [\n        { x: width - STATIC_DENSITY / 2, y: 0 },\n        { x: width - STATIC_DENSITY / 2, y: height },\n        { x: width + STATIC_DENSITY / 2, y: height },\n        { x: width + STATIC_DENSITY / 2, y: 0 }\n      ])\n\n\n      const margin =  parseInt( window.getComputedStyle(headerRef.current, null).getPropertyValue('padding-left'), 10);\n      //console.log(margin, 10))\n\n      const ballBody = scene.engine.world.bodies[4]\n      Matter.Body.setPosition(ballBody, {\n        x: margin - 12 / 2,\n        y: height - 100 + 12 / 2,\n      })\n\n      const holeBody = scene.engine.world.bodies[5]\n      Matter.Body.setPosition(holeBody, {\n        x: width - margin,\n        y: height - 100,\n      })\n\n\n    }\n  }, [scene, constraints])\n\n\n  /*   return (\n      <>\n        { eg ?\n          <EngineContext.Provider value={eg}>\n            <div\n              ref={boxRef}\n              style={{\n                width: 300,\n                height: 300,\n                position: 'absolute',\n                opacity: 0.5,\n              }}\n            >\n              <canvas ref={canvasRef} />\n            </div>\n            {props.children}\n          </EngineContext.Provider>\n          : null\n        }\n      </>\n    ) */\n\n  return (\n    <>\n      <H />\n      {/* <Title text={text} textRef={h1text} /> */}\n      {playerB && <Player color={0xeef1f5} radios={10} body={playerB}/*  matter={Matter} */ />}\n      <Hole />\n      {props.children}\n      {/*  {\n        eg &&\n        <EngineContext.Provider value={eg}></EngineContext.Provider>\n      } */}\n    </>\n    /*  eg ? <EngineContext.Provider value={eg}>{props.children}</EngineContext.Provider> : \n     null */\n  )\n\n\n}\n","/workspace/tmp.hug0/src/physics/usePhysics.js",[],"/workspace/tmp.hug0/src/physics/index.js",[],"/workspace/tmp.hug0/src/components/logo.js",[],"/workspace/tmp.hug0/src/components/index.js",[],"/workspace/tmp.hug0/src/components/player.js",[],"/workspace/tmp.hug0/src/components/hole.js",[],"/workspace/tmp.hug0/src/components/title.js",[],"/workspace/tmp.hug0/src/physics/components/index.js",[],["137","138"],"/workspace/tmp.hug0/src/physics/components/Bodies.js",["139"],"import { useEffect } from 'react';\nimport Matter from \"matter-js\";\nimport { useEngine } from '../useEngine'\n\n/* const Circle = PixiComponent('Rectangle', {\n    create: props => new Graphics(),\n    applyProps: (instance, _, props) => {\n      const { x, y, width, height, fill } = props;\n      instance.clear();\n      instance.beginFill(fill);\n      instance.drawRect(x, y, width, height);\n      instance.endFill();\n    },\n  });\n */\n\n\n/* Bodies.circle(100 + playerSize.radios, localHeight - 100 - playerSize.radios, playerSize.radios + 5, {\n  restitution: 1,\n  friction: 0.3,\n  frictionAir: 0.05,\n  label: 'ball',\n  collisionFilter: {\n    category: '0x0002'\n  }\n}); */\n\nexport const CircleBody = (props) => {\n  //console.log(root)\n  //ref.current = body;\n  //const ref = useForwardRef(bodyRef);\n  \n\n  const eg = useEngine();\n  /*   const engine = useContext(EngineContext)\n    console.log(engine)\n    console.log('circle') */\n  /*  useCallback((g) => { */\n\n  useEffect(() => {\n    console.log(props)\n    //let b = Matter.Bodies.circle(100, 100, 20);\n    let b = Matter.Bodies.circle(props.x, props.y, props.radios, props.options, props.maxSides)\n    // Matter.World.add(engine.world, [body])\n    Matter.World.add(eg.world, b)\n\n\n  }, []);\n/* \n  useEffect(() => {\n    const body = ref.current!;\n    Matter.Body.setPosition(body, { x: props.x, y: props.y });\n  }, [ref, props.x, props.y]); */\n\n  return (null)\n\n}\n\n//export default CircleBody","/workspace/tmp.hug0/src/physics/useEngine.js",[],"/workspace/tmp.hug0/src/p5/p5-1.js",[],"/workspace/tmp.hug0/src/p5/p5-2.js",[],"/workspace/tmp.hug0/src/p5/p5-3.js",[],"/workspace/tmp.hug0/src/p5/p5-4.js",[],"/workspace/tmp.hug0/src/p5/p5-5.js",[],"/workspace/tmp.hug0/src/p5/p5-6.js",[],"/workspace/tmp.hug0/src/p5/p5-7.js",[],"/workspace/tmp.hug0/src/p5/p5-8.js",[],"/workspace/tmp.hug0/src/p5/p5-9.js",[],"/workspace/tmp.hug0/src/p5/p5-10.js",[],"/workspace/tmp.hug0/src/components/card.js",[],"/workspace/tmp.hug0/src/components/ga-card.js",[],"/workspace/tmp.hug0/src/components/social.js",[],"/workspace/tmp.hug0/src/components/pens.js",[],"/workspace/tmp.hug0/src/components/pen.js",[],"/workspace/tmp.hug0/src/components/link.js",[],"/workspace/tmp.hug0/src/components/draw.js",[],"/workspace/tmp.hug0/src/components/ga-group.js",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":453,"column":6,"nodeType":"146","endLine":453,"endColumn":26,"suggestions":"147"},{"ruleId":"140","replacedBy":"148"},{"ruleId":"142","replacedBy":"149"},{"ruleId":"144","severity":1,"message":"150","line":48,"column":6,"nodeType":"146","endLine":48,"endColumn":8,"suggestions":"151"},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'headerRef'. Either include it or remove the dependency array.","ArrayExpression",["154"],["152"],["153"],"React Hook useEffect has missing dependencies: 'eg.world' and 'props'. Either include them or remove the dependency array.",["155"],"no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [scene, constraints, headerRef]",{"range":"160","text":"161"},"Update the dependencies array to be: [eg.world, props]",{"range":"162","text":"163"},[11127,11147],"[scene, constraints, headerRef]",[1231,1233],"[eg.world, props]"]